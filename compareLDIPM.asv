clc
clear all
close all

% Load data
saveFlag = 0;
caseFlag = 5;
switch caseFlag
    case 1 % Active constraints MPC example
        load('QPData'); 
        H = H_QP;
        c = f_QP;
        A = A_QP;
        b = b_QP;
    case 2 % Inactive constraints MPC example
        load('QPData2');
        H = H_QP;
        c = f_QP;
        A = A_QP;
        b = b_QP;
    case 3 % Case 1 but with only the input constraints
        load('QPData');
        H = H_QP;
        c = f_QP;
        xmin = -ones(size(H_QP,1),1);
        xmax = ones(size(H_QP,1),1);
        [A,b] = minmaxMatrices(xmin,xmax);
    case 4 % Scalable QP example
        N = 10;
        H = diag(linspace(0.01,1,N));
        %         H = eye(N);
        load('minmax')
        [A,b] = minmaxMatrices(xmin,xmax);
    case 5 % Much more constraints than variables
        
%         % Static variables
%         N = 100;
%         condTarget = 1e1;
%         m = N;
%         A = zeros(m,N);
%         for i = 1:m
%             A(i,1+(i-1)*(N/m):i*(N/m)) = ones(1,N/m);
%         end
%         b_low = -1;
%         b_high = 1;
%         c_low = -10;
%         c_high = 10;
%         
%         % Changing Variables
%         hh= 2*rand(N,N)-1 + 2*rand(N,N)-1;
%         hh = hh*hh';              % symmetric with random entries beween -2 and 2
%         [u, s, v] = svd(hh);
%         s = diag(s);           % s is vector
%         s = s(1)*( 1-((condTarget-1)/condTarget)*(s(1)-s)/(s(1)-s(end))) ;
%         s = diag(s);           % back to matrix
%         H = u*s*v';
%         H = 1/2*(H' + H);
%         c =  c_low + (c_high-c_low).*rand(N,1);
%         b = b_low + (b_high - b_low)*rand(m,1);
        
        %                 save('Case5_Data','H','c','A','b');
        load('Case5_Data');
end
invH = inv(H);


OPTIONS = optimoptions('quadprog');
OPTIONS = optimoptions(OPTIONS, 'OptimalityTolerance', 1e-10, 'ConstraintTolerance', 1e-10);
x_QP = quadprog(H,c,A,b,[],[],[],[],[],OPTIONS);

length(find(abs(A*x_QP - b)<1e-4))

% Run LDIPM with normal settings
mu_f = 1e-10;
mu_0 = 1e8;
maxIter = 50000;
maxCGIter = 100000;
CGTol = 1e-10;
CGPreCondFlag = 0;
printFlag = 1;
v0 = zeros(size(A,1),1);
if caseFlag < 5
    vThresh = -4;
    vNumThresh = length(v0)/4;
else
    vThresh = 0;
    vNumThresh = -1; % so always on
end

% % First, solve for the unconstrained solution and project onto solution
% xStar_unc = -H\c;
% xProj = xStar_unc;
% n = size(H,1);
% m = size(A,1);
% for i = 1:n
%    if xProj(i) >  xmax(i)
%        xProj(i) = xmax(i);
%    elseif xProj(i) < xmin(i)
%        xProj(i) = xmin(i);
%    end

% 
% % Calculate slack
% s_init = A*xProj + b;
% for i = 1:m
%     if s_init(i) < 1e-6
%         s_init(i) = 1e-6;
%     end
% end
% v0 = -log(s_init);
% fprintf('------ Running with regular scheme ------ \n')
% [xReg,lambdaReg,sReg,vReg,~,~,numIterReg,~,~,execTimeReg] = logInteriorPoint(H,c,A,b,[],[],mu_f,mu_0,v0,maxIter,printFlag);
% 
% % Diagonal noPrecond
% fprintf('------ Running with CGLDIPM (no precond) ------ \n')
% [x,~,~,vStar,muStar,~,numIter,~,~,execTime,CGIters,CGres,wsRes,CGerror] = logInterior')Point_conjgrad(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,0,printFlag);

% % No precond
% fprintf('------ Running with CGLDIPM (n0 precond) ------ \n')
% [x1,~,~,v1,muStar1,~,numIter1,~,~,execTime1,CGIters1,CGres1,wsRes1,CGerror1] = logInteriorPoint_conjgrad(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,0,printFlag);
% % norm(x2-x_QP)
% % sum(sum(CGIters2))
% 
% % Diagonal precond
% fprintf('------ Running with CGLDIPM (diag precond) ------ \n')
% [x2,~,~,v2,muStar2,~,numIter2,~,~,execTime2,CGIters2,CGres2,wsRes2,CGerror] = logInteriorPoint_conjgrad(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,1,printFlag);
% % norm(x2-x_QP)
% % sum(sum(CGIters2))

% % Alternative algorithm precond
% fprintf('------ Running with CGLDIPM-Alt (diag precond) ------ \n')
% CGTol = 1e-10;
% maxCGIter = 50;
% muStep = 0.99;
% maxIter = 10000000;
% [x3,v3,mu3,execTime3,numIter3,CGIters3,CGres3] = logInteriorPoint_conjgradalt(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,muStep,1,printFlag);
% norm(x3-x_QP)
% sum(CGIters3)

% % Alternative algorithm precond
% fprintf('------ Running with CGLDIPM-Alt (mod search) ------ \n')
% [x4,v4,mu4,execTime4,numIter4,CGIters4,CGres4] = logInteriorPoint_conjgrad_modSearch(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,1,printFlag);
% norm(x4-x_QP)
% sum(CGIters4)

% % No precond
% fprintf('------ Running with CGLDIPM-Alt (no precond) ------ \n')
% [x4,v4,mu4,execTime4,numIter4,CGIters4,CGres4] = logInteriorPoint_conjgradalt(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,muStep,0,printFlag);

% Given parameters (delta,epsilon), deteremine the shortstep parameters (N,k)
m = size(A,1);
delta = .45; % delta in (0,1/2)
epsilon = delta; % epsilon in (0,invq(delta)), invq(x) and x intersect at like 0.9 so this is always valid
zeta = acosh(delta/2 + 1) - epsilon;
if epsilon == delta
    N_ls = 1;
else
    N_ls = ceil(1 + log(epsilon)/(log(delta)*log(2)));
end
k_ls = exp(2*acosh(zeta^2/(2*m) +1 ));
beta = 1/2;
params.delta = delta;
params.epsilon = epsilon;
params.zeta = zeta;
params.N = N_ls;
params.k = k_ls;
params.beta = beta;
const.params = params;

% % Shortstep_optimal
% fprintf('------ Running with CGLDIPM-Shortstep (Optimal)  ------ \n')
%  [x_ss,v_ss,mu_ss,execTime_ss,numIter_ss,CGIters_ss,CGres_ss,dHist_ss] = logInteriorPoint_conjgrad_shortStep_opt(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,1,params,vThresh,vNumThresh);
% 
%  % Shortstep early
% fprintf('------ Running with CGLDIPM-Shortstep  ------ \n')
% [x_ss2,v_ss2,mu_ss2,execTime_ss2,numIter_ss2,CGIters_ss2,CGres_ss2,dHist_ss2] = logInteriorPoint_conjgrad_shortStep(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,1,params,vThresh,vNumThresh);
% 
%  % Divergence based criterion
% fprintf('------ Running with CGLDIPM-Shortstep (Calc Error) ------ \n')
% [x_ss3,v_ss3,mu_ss3,execTime_ss3,numIter_ss3,CGIters_ss3,CGres_ss3,dHist_ss3] = logInteriorPoint_conjgrad_shortStep_calcError(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,1,params,vThresh,vNumThresh);

 % Divergence based criterion
fprintf('------ Running with CGLDIPM Calc Divergence  ------ \n')
[x_ss4,v_ss4,mu_ss4,execTime_ss4,numIter_ss4,CGIters_ss4,CGres_ss4,dHist,divHist,decreaseIters,fPrime,fPrimeInit] = logInteriorPoint_conjgrad_shortStep_calcDivergence(H,c,A,b,mu_f,mu_0,v0,maxIter,maxCGIter,CGTol,1,params,vThresh,vNumThresh);


% fixed = sum(CGIters_ss)
% early = sum(CGIters_ss2)
% errorbased = sum(CGIters_ss3)
% divbased = sum(CGIters_ss4)

%% Plotting
close all

% % Precond vs. Unprecond plot
% figure
% hold on; grid on; box on
% h1 = plot(CGIters1(:,1),'linewidth',2);
% h2 = plot(CGIters2(:,1),'linewidth',2);
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
% ylabel('Total CG Iterations','interpreter','latex','fontsize',15)
% legend('No precond.','Diag precond','interpreter','latex','fontsize',12,'location','best')
% ylim([0 Inf])
% 
% % Total CG Iterations plot (for warm-starting)
% figure
% hold on; grid on; box on
% plot(CGIters1(:,1)+CGIters1(:,2),'linewidth',2,'color',h1.Color);
% plot(CGIters2(:,1)+CGIters2(:,2),'linewidth',2,'color',h2.Color);
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
% ylabel('Total CG Iterations','interpreter','latex','fontsize',15)
% legend('No precond.','Diag precond','interpreter','latex','fontsize',12,'location','best')
% ylim([0 Inf])
% 
% % Breakdown of CG Iterations plot (for warm-starting)
% figure
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% subplot(2,1,1)
% hold on; grid on; box on
% plot(CGIters1(:,1),'linewidth',2,'color',h1.Color);
% plot(CGIters1(:,2),'linewidth',2,'color',h1.Color,'linestyle','-.');
% ylabel('Total CG Iterations','interpreter','latex','fontsize',15)
% legend('System 1','System 2','interpreter','latex','fontsize',12,'location','best')
% ylim([0 Inf])
% subplot(2,1,2)
% hold on; grid on; box on
% plot(CGIters2(:,1),'linewidth',2,'color',h2.Color);
% plot(CGIters2(:,2),'linewidth',2,'color',h2.Color,'linestyle','-.');
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
% ylabel('Total CG Iterations','interpreter','latex','fontsize',15)
% legend('System 1','System 2','interpreter','latex','fontsize',12,'location','best')
% ylim([0 Inf])

% --------------- Plots for the shortstep method ---------------

% figure
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% h1 = plot(CGIters_ss,'linewidth',2);
% grid on; box on; hold on;
% h2 = plot(CGIters_ss2,'linewidth',2);
% h3 = plot(CGIters_ss3,'linewidth',2);
% h4 = plot(CGIters_ss4,'linewidth',2);
% xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
% ylabel('CG Iterations','interpreter','latex','fontsize',15)
% legend('Fixed truncation','Bound-based truncation','Error-based truncation','Divergence-based truncation','interpreter','latex','fontsize',12,'location','best')
% ylim([1 Inf])
% 
% figure
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% semilogy(CGres_ss,'linewidth',2)
% grid on; box on; hold on;
% semilogy(CGres_ss2,'linewidth',2);
% semilogy(CGres_ss3,'linewidth',2);
% semilogy(CGres_ss4,'linewidth',2);
% xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
% ylabel('CG Residual','interpreter','latex','fontsize',15)
% legend('Fixed truncation','Bound-based truncation','Error-based truncation','Divergence-based truncation','interpreter','latex','fontsize',12,'location','best')
% ylim([1e-12 Inf])
% 
% figure
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% semilogy(dHist_ss,'linewidth',2)
% grid on; box on; hold on;
% semilogy(dHist_ss2,'linewidth',2)
% semilogy(dHist_ss3,'linewidth',2)
% semilogy(dHist_ss4,'linewidth',2)
% xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
% ylabel('$\| d \|$','interpreter','latex','fontsize',15)
% ylim([1e-5 1])
% % xlim([1 15])
% legend('Fixed truncation','Bound-based truncation','Error-based truncation','Divergence-based truncation','interpreter','latex','fontsize',12,'location','best')

figure
set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
semilogy(divHist,'linewidth',2)
xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
ylabel('$h(v_i,\hat{v}_i)$','interpreter','latex','fontsize',15)
grid on; box on;
xlim([1 Inf])


figure
set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
indVec = find(abs(fPrime) > 0);
ind = indVec(1);
fPrimeBound = divHist + dHist.^2;
semilogy(fPrimeBound(ind:end))
hold on; box on; grid on
semilogy(-fPrime(ind:end),'linewidth',2)
semilogy(-fPrimeInit(ind:end),'linewidth',2)
xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
ylabel('$-f''(0)$','interpreter','latex','fontsize',15)
legend('$f(0)+\|d\|^2$','-f''(0)','-f''(0) after 1 CG iteration','interpreter','latex','fontsize',12,'location','best')

figure
set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
semilog(divHist(ind:end),-fPrimeBound(ind:end))
hold on; box on; grid on
plot(divHist(ind:end),fPrime(ind:end),'linewidth',2)
plot(divHist(ind:end),fPrimeInit(ind:end),'linewidth',2)
xlabel('$f(0)$','interpreter','latex','fontsize',15)
ylabel('$f''(0)$','interpreter','latex','fontsize',15)
legend('$-f(0)-\|d\|^2$','f''(0)','f''(0) after 1 CG iteration','interpreter','latex','fontsize',12,'location','best')



% figure
% set(gcf,'units','normalized','position',[0.1300 0.1192 0.1 0.2])
% plot(decreaseIters,'linewidth',2)
% xlabel('LDIPM Iteration','interpreter','latex','fontsize',15)
% ylabel('CG Iterations','interpreter','latex','fontsize',15)
% grid on; box on;
% xlim([1 Inf])
% ylim([1 Inf])